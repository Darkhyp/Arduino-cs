using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO.Ports;
using System.Reflection;

using System.Windows.Forms.DataVisualization.Charting;

/*
using Windows.Storage.Streams;
using Windows.Devices.Enumeration;
using Windows.Devices.SerialCommunication;
*/



namespace ARDUINO_USB
{



    public partial class Form1 : Form
    {
        private SerialPort port;
        private List<double> voltage = new List<double>(0);
		private List<int> seconds = new List<int>(0);
        private bool stop = false;
        private double dt = 1;

        public static readonly List<string> SupportedBaudRates = new List<string>
        {
            "300",
            "600",
            "1200",
            "2400",
            "4800",
            "9600",
            "19200",
            "38400",
            "57600",
            "115200",
            "230400",
            "460800",
            "921600"
        };

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (button1.Text == "Connect")
            {
                button3.Enabled = true;
                button4.Enabled = true;
                button5.Enabled = true;
                button6.Enabled = true;
                label2.Enabled = true;
                label3.Enabled = true;
                button1.Text = "Disconnect";

                //            serialPort1.Open();
                var portName = comboBox1.SelectedItem.ToString();
                port = new SerialPort(portName);
                port.Open();
                port.ReadTimeout = 2000;

                if (port!=null)
                {
                    port.Write("c");
                }
            }
            else
            {
                button6_Click(sender, e);

                button3.Enabled = false;
                button4.Enabled = false;
                button5.Enabled = false;
                button6.Enabled = false;
                label2.Enabled = false;
                label3.Enabled = false;
                button1.Text = "Connect";

                port.Close();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            var portName = comboBox1.SelectedItem.ToString();
            var maxBaudRate = 0;
            try
            {
                //SupportedBaudRates has the commonly used baudRate rates in it
                //flavor to taste
                foreach (var baudRate in SupportedBaudRates)
                {
                    var intBaud = Convert.ToInt32(baudRate);
                    using (var port = new SerialPort(portName))
                    {
                        port.BaudRate = intBaud;
                        port.Open();
                    }
                    maxBaudRate = intBaud;
                }
            }
            catch
            {
                //ignored - traps exception generated by
                //baudRate rate not supported
            }

            if (maxBaudRate>0)
            {
                comboBox2.SelectedItem = maxBaudRate.ToString();
            }

/*
            var _serialPort = new SerialPort(portName);
            _serialPort.Open();

            // Getting COMMPROP structure, and its property dwSettableBaud.
            object p = _serialPort.BaseStream.GetType().GetField("commProp",
               BindingFlags.Instance | BindingFlags.NonPublic).GetValue(_serialPort.BaseStream);
            Int32 dwSettableBaud = (Int32)p.GetType().GetField("dwSettableBaud",
               BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).GetValue(p);

            _serialPort.Close();
//            _currentSerialSettings.UpdateBaudRateCollection(dwSettableBaud);
*/

        }

        private void button3_Click(object sender, EventArgs e)
        {
            if (port != null)
            {
                if (button3.Text == "LED on")
                {
                    port.Write("e");
                    button3.Text = "LED off";
                }
                else
                {
                    port.Write("d");
                    button3.Text = "LED on";
                }
            }

        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (port != null)
            {
                if (button4.Text == "LED bliking")
                {
                    port.Write("b");
                    button4.Text = "LED off";
                }
                else
                {
                    port.Write("d");
                    button4.Text = "LED bliking";
                }
            }

        }

        private double get_V()
        {
            if (port != null)
            {
                port.Write("v");
                var getData = port.ReadLine();
                Console.WriteLine(Convert.ToUInt16(getData) / (Math.Pow(2, 10) - 1) * 5.0);
                return Convert.ToUInt16(getData) / (Math.Pow(2,10) - 1) * 5.0;
            }
            else
                return 0;
        }

        private void button5_Click(object sender, EventArgs e)
        {
            label3.Text = get_V().ToString("F") + 'V';
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            if (chart1.InvokeRequired)
            {
                chart1.Invoke(new Action(() =>{ Update();}));
            }
            else
            {
                voltage.Add(get_V());
                if (seconds.Count == 0)
                    seconds.Add(0);
                else
                    seconds.Add(seconds.Last() + 1);

                if (chart1.Series[0].Points.Count > 20)
                {
                    chart1.Series[0].Points.RemoveAt(0);
                }
                chart1.ResetAutoValues();
                chart1.Series[0].Points.AddXY(seconds.Last(), voltage.Last());
                
            }
        }
        private void button6_Click(object sender, EventArgs e)
        {
            //            timer2_Tick(sender, e);

            // /*
            stop = !stop;

            if (stop){
                button6.Text = $"Stop Voltage every {dt}s";
                timer2.Start();
            }
            else
            {
                timer2.Stop();
                button6.Text = $"Get Voltage every {dt}s";
            }
            // */
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            foreach (var baudRate in SupportedBaudRates)
            {
                comboBox2.Items.Add(baudRate);
            }

            // Get a list of serial port names.
            string[] ports = SerialPort.GetPortNames();

            //show list of valid com ports
            if (ports.Length > 0)
            {
                foreach (var s in ports)
                {
                    comboBox1.Items.Add(s);
                }
                comboBox1.SelectedIndex = 0;
                comboBox2.SelectedItem = "9600";
                button1.Enabled = true;
                button2.Enabled = true;
                comboBox2.Enabled = true;


                // Add series
                chart1.Series[0].MarkerStyle = MarkerStyle.Circle;
//                chart1.Series[0].Name = "Voltage";
                chart1.Series[0].ChartType = SeriesChartType.Line;
                chart1.ChartAreas[0].AxisY.Maximum = 5;
                chart1.ChartAreas[0].AxisY.Minimum = 0;
                chart1.ChartAreas[0].AxisY.Title = @"Voltage, V";
                chart1.ChartAreas[0].AxisX.Title = @"Time, s";
                chart1.Legends[0].DockedToChartArea = chart1.ChartAreas[0].Name;
                chart1.Series[0].IsVisibleInLegend = false;

                // Set title.
                chart1.Titles.Add("Voltage mesurement");
                chart1.Palette = ChartColorPalette.SeaGreen;

            }
            else
            {
            }
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            dt = 0.5+Convert.ToDouble(trackBar1.Value)/100*(3-0.5);
            this.timer2.Interval = Convert.ToInt32(dt*1000);
            if (stop)
            {
                button6.Text = $"Stop Voltage every {dt}s";
            }
            else
            {
                button6.Text = $"Get Voltage every {dt}s";
            }

        }
    }
}
